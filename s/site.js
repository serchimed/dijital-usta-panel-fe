let DELAY_00 = 12;let DELAY_0 = 123;let DELAY_1 = 1234;let DELAY_2 = 2345;function getId(key = "memberId") { let qs = new URLSearchParams(window.location.search);let id = qs.get("id");if (!id) { id = USER.id;if (key !== "memberId") { id = USER.companyId;} } if (!id) { console.warn(`No ID in query string or user context for key: ${key}`);return null;} return id;} function getTomorrow() { let t = new Date();t.setDate(t.getDate() + 1);return t.toISOString().split('T')[0];} function getMsgLine(msg) { return `<tr><td colspan="99" class="graytr">${msg}</td></tr>`;} function div(className) { let $d = document.createElement("div");if (className) { $d.className = className;} return $d;} function btn(className, text) { let $b = document.createElement("button");$b.type = "button";if (className) { $b.className = className;} if (text) { $b.textContent = text;} return $b;} function h3(text) { let $h = document.createElement("h3");if (text) { $h.textContent = text;} return $h;} function lbl(text) { let $l = document.createElement("label");if (text) { $l.textContent = text;} return $l;} function date(value) { let $i = document.createElement("input");$i.type = "date";if (value) { $i.value = value;} return $i;} function url(placeholder) { let $i = document.createElement("input");$i.type = "url";if (placeholder) { $i.placeholder = placeholder;} return $i;} function inp(placeholder) { let $i = document.createElement("input");$i.type = "text";if (placeholder) { $i.placeholder = placeholder;} return $i;} function txt(placeholder) { let $t = document.createElement("textarea");if (placeholder) { $t.placeholder = placeholder;} return $t;} function chk(value, checked) { let $i = document.createElement("input");$i.type = "checkbox";if (value !== undefined) { $i.value = value;} if (checked !== undefined) { $i.checked = checked;} return $i;} function ul() { return document.createElement("ul");} function li(text) { let $li = document.createElement("li");if (text) { $li.textContent = text;} return $li;} function lia(text, href) { let $li = li();let $a = a(text, href);$li.append($a);return $li;} function tr() { return document.createElement("tr");} function a(text, href) { let $a = document.createElement("a");if (href) { $a.href = href;} if (text) { $a.textContent = text;} return $a;} function p(text) { let $p = document.createElement("p");if (text) { $p.textContent = text;} return $p;} function td(text) { let $td = document.createElement("td");if (text) { $td.textContent = text;} return $td;} function th(text) { let $th = document.createElement("th");if (text) { $th.textContent = text;} return $th;} function table() { return document.createElement("table");} function thead() { return document.createElement("thead");} function tbody() { return document.createElement("tbody");} function details() { return document.createElement("details");} function summary(text) { let $s = document.createElement("summary");if (text) { $s.textContent = text;} return $s;} function strong(text) { let $s = document.createElement("strong");if (text) { $s.textContent = text;} return $s;} function tda(text, href) { let $td = td();let $a = a(text, href);$a.target = "_blank";$td.append($a);return $td;} function tdbtn(btn) { let $td = td();$td.append(btn, p());return $td;} function val(id) { let $i = document.getElementById(id);if ($i) { return ($i.value || "").trim();} return undefined;} function set(id, val) { let $i = document.getElementById(id);if ($i) { $i.value = val || "";} } function formatDateLong(dateStr) { if (!dateStr) return "-";let dt = new Date(dateStr);if (isNaN(dt.getTime())) return dateStr;return dt.toLocaleDateString("tr-TR", { day: '2-digit', month: 'long', year: 'numeric' });} function formatTimeLong(dateStr) { if (!dateStr) return "-";let dt = new Date(dateStr);if (isNaN(dt.getTime())) return dateStr;return dt.toLocaleDateString("tr-TR", { day: '2-digit', month: 'long', year: 'numeric' }) + " " + dt.toLocaleTimeString("tr-TR", { hour: '2-digit', minute: '2-digit', second: '2-digit' });} function formatDateInput(dateStr) { if (!dateStr) return "";let dt = new Date(dateStr);if (isNaN(dt.getTime())) return "";return dt.toISOString().split('T')[0];} function checkEmail(email) { return email.includes("@") && email.includes(".") && email.indexOf("@") < email.lastIndexOf(".") && email.indexOf(" ") < 0 && email.length >= 5;} function checkPhone(phone) { if (!phone || typeof phone !== "string") return false;return /^0\d{10}$/.test(phone);} function checkUrl(url) { if (!url || typeof url !== "string") return false;try { new URL(url);return true;} catch { return false;} } function showHeaderMsg(msg) { let $banner = document.createElement("div");$banner.className = "header-message";$banner.textContent = msg;let $header = document.querySelector("header");if ($header && $header.nextSibling) { $header.parentNode.insertBefore($banner, $header.nextSibling);} else if ($header) { $header.after($banner);} else { document.body.prepend($banner);} return $banner;} function showContent() { let $m = document.querySelector("main");if ($m) { hideOverlay();setTimeout(() => $m.classList.add("show"), DELAY_0);} } function hideOverlay() { let $o = document.querySelector(".overlay");if ($o) { $o.classList.add("fade-out");setTimeout(() => $o.remove(), DELAY_0 * 2);} } function toggleText(element) { let truncated = element.parentElement.firstChild;let full = truncated.nextElementSibling;if (truncated.style.display == "none") { truncated.style.display = "inline-block";full.style.display = "none";} else { truncated.style.display = "none";full.style.display = "inline-block";} } function hasChanges(initReq, req) { for (let key in req) { if (req[key] !== initReq[key]) { return true;} } return false;} let AUTOCOMPLETE_LISTENER_ADDED = false;function autocomplete($input, data, filterFn, displayFn, onSelect, options = {}) { let items = [];let dataLoaded = false;let ignoreNextInput = false;let $list = div();$input.after($list);let $customInput;if (options.allowCustom && options.customInputPlaceholder) { $customInput = inp(options.customInputPlaceholder);$customInput.style.display = "none";$list.after($customInput);} async function loadData() { if (dataLoaded) return;if (typeof data === 'function') { items = await data();} else { items = data;} dataLoaded = true;} async function search(text) { $list.innerHTML = "";$list.classList.remove("show");if (!text) return;await loadData();let filtered = items.filter(item => filterFn(item, text));if (filtered.length === 0) return;filtered.forEach(item => { let $item = div();$item.textContent = displayFn(item);$item.addEventListener(CLICK_EVENT, function (e) { e.stopPropagation();e.preventDefault();$list.classList.remove("show");ignoreNextInput = true;setTimeout(() => { onSelect(item, $input, $customInput);setTimeout(() => { ignoreNextInput = false;}, DELAY_0);}, DELAY_00);});$list.append($item);});if (options.allowCustom) { let $custom = div();$custom.textContent = options.customText || "Listede yok";$custom.style.fontStyle = "italic";$custom.style.color = "#666";$custom.addEventListener(CLICK_EVENT, function (e) { e.stopPropagation();if ($customInput) { $input.style.display = "none";$customInput.style.display = "block";$customInput.focus();} if (options.onCustom) { options.onCustom($input, $customInput);} $list.classList.remove("show");});$list.append($custom);} $list.classList.add("show");} $input.addEventListener("input", function () { if (ignoreNextInput) return;search(this.value.trim());});$input.addEventListener("focus", function () { if (this.value.trim()) { search(this.value.trim());} });$input.addEventListener("blur", function () { setTimeout(() => { $list.classList.remove("show");}, DELAY_0);});if (!AUTOCOMPLETE_LISTENER_ADDED) { document.addEventListener(CLICK_EVENT, function (e) { if (!e.target.closest(".sel")) { document.querySelectorAll(".sel div").forEach($list => { $list.classList.remove("show");});} });AUTOCOMPLETE_LISTENER_ADDED = true;} return { $list, $customInput };} function showErrors($msg, errors) { if (errors.length) { $msg.textContent = errors.map(e => `• ${e}`).join("\n");return true;} return false;} function clearErrors($msg) { $msg.textContent = "";} function validateWordCount(text, maxWords, fieldName) { if (!text) return null;let wordCount = text.split(/\s+/).filter(Boolean).length;if (wordCount > maxWords) { return `${fieldName} en fazla ${maxWords} kelime olmalıdır. (Şu an: ${wordCount})`;} return null;} function getRequiredQueryParam(paramName, redirectUrl = "index.html") { let prms = new URLSearchParams(window.location.search);let value = prms.get(paramName);if (!value) { window.location.href = redirectUrl;return null;} return value;} function validateDateRange(startDate, endDate) { let errors = [];if (startDate && endDate) { let s = new Date(startDate);let e = new Date(endDate);if (isNaN(s.getTime()) || isNaN(e.getTime())) { errors.push("Tarih formatı geçersiz.");} else if (s > e) { errors.push("Bitiş tarihi, başlangıç tarihinden önce olamaz.");} } return errors;} let CSS_CLASSES = { modal: "modal", modalOverlay: "overlay", modalHeader: "modal-header", modalBody: "modal-body", modalButtons: "modal-buttons", modalBtnCancel: "modal-btn-cancel", modalBtnPrimary: "modal-btn-primary", modalMessage: "modal-message", modalClose: "modal-close" };function createModal(title, bodyContent) { let existingOverlays = document.querySelectorAll(`.${CSS_CLASSES.modalOverlay}`);existingOverlays.forEach($o => $o.remove());let $overlay = div(CSS_CLASSES.modalOverlay);let $modal = div(CSS_CLASSES.modal);let $header = div(CSS_CLASSES.modalHeader);let $title = h3(title);let $closeBtn = btn(CSS_CLASSES.modalClose, "✖");$closeBtn.addEventListener(CLICK_EVENT, () => closeModal($overlay));$header.append($title, $closeBtn);let $mbody = div(CSS_CLASSES.modalBody);if (typeof bodyContent === "string") { $mbody.append(p(bodyContent));} else { $mbody.append(bodyContent);} $modal.append($header, $mbody);$overlay.append($modal);$overlay.addEventListener(CLICK_EVENT, (e) => { if (e.target === $overlay) { closeModal($overlay);} });document.body.append($overlay);return $overlay;} function closeModal($o) { if ($o && $o.parentNode) { $o.remove();} } function showModalMessage($msgDiv, type, message) { $msgDiv.style.display = "block";$msgDiv.className = `${CSS_CLASSES.modalMessage} ${type}`;$msgDiv.innerText = message;} function setButtonLoading($btn, isLoading) { if (!$btn) return;if (isLoading) { if (!$btn.dataset.originalText) { $btn.dataset.originalText = $btn.innerText;} $btn.disabled = true;$btn.innerText = LOADING_MESSAGE;} else { $btn.disabled = false;$btn.innerText = $btn.dataset.originalText || $btn.innerText;delete $btn.dataset.originalText;} } function createModalButtons(cancelText, submitText, onCancel, onSubmit) { let $d = div(CSS_CLASSES.modalButtons);let $cancelBtn = btn(CSS_CLASSES.modalBtnCancel, cancelText);$cancelBtn.addEventListener(CLICK_EVENT, onCancel);let $submitBtn = btn(CSS_CLASSES.modalBtnPrimary, submitText);$submitBtn.addEventListener(CLICK_EVENT, onSubmit);$d.append($cancelBtn, $submitBtn);return { buttonsDiv: $d, cancelBtn: $cancelBtn, submitBtn: $submitBtn };} function createConfirmationModal(options) { let { confirmMessage, apiEndpoint, apiParams = {}, confirmButtonText = "Onayla", sourceButton } = options;let $mbody = div();let $confirmLabel = p(confirmMessage);let $msgDiv = div(CSS_CLASSES.modalMessage);let $modal;let handleConfirm = async function () { setButtonLoading(buttons.submitBtn, true);if (sourceButton) sourceButton.disabled = true;let result = await api(apiEndpoint, apiParams);if (result && result.isSuccess && result.data) { showModalMessage($msgDiv, "success", result.data);setButtonLoading(buttons.submitBtn, false);setTimeout(() => { closeModal($modal);}, DELAY_2);} else { showModalMessage($msgDiv, "error", result?.data || ERROR_MESSAGE_DEFAULT);setButtonLoading(buttons.submitBtn, false);} if (sourceButton) sourceButton.disabled = false;};let buttons = createModalButtons("İptal", confirmButtonText, () => closeModal($modal), handleConfirm);$mbody.append($confirmLabel, buttons.buttonsDiv, $msgDiv);$modal = createModal("Onay", $mbody);} let MENU = { "admin": [ { text: "Firmalar", href: "admin-company-list" }, { text: "Adaylar", href: "admin-candidate-list" }, { text: "Adminler ve Editörler", href: "admin-and-editor-list" }, { text: "Toplu Puan Güncelle", href: "admin-point-update" }, { text: "TOBB ETÜ Eğitiminden Geçenleri Davet Et", href: "admin-candidate-invite" }, { text: "Yapay Zeka Ayarları", href: "admin-ai" }, { text: "Data İşlemleri", href: "admin-data" } ], "company": [ { text: "Adaylar", href: "company-candidate-list" } ], "candidate": [], "editor": [ { text: "Firmalar", href: "admin-company-list" }, { text: "Adaylar", href: "admin-candidate-list" } ], "guest": [ { text: "Ana Sayfa", href: "index" }, { text: "Giriş Yap", href: "login" }, { text: "Şifre İste", href: "demand-password" } ] };let PUBLIC_PAGES = [ "login", "demand-password", "access-denied", "error-client", "error-server", "candidate-invite-accept", "concent", "404" ];let PAGE_ROLES = { "index": ["admin", "editor"], "logout": ["admin", "editor", "candidate", "company"], "admin-company-list": ["admin", "editor"], "admin-company-profile": ["admin", "editor"], "admin-candidate-list": ["admin", "editor"], "admin-candidate-list-included": ["admin"], "admin-candidate-profile": ["admin", "editor"], "admin-and-editor-list": ["admin"], "admin-company-add": ["admin", "editor"], "admin-editor-invite": ["admin"], "admin-candidate-invite": ["admin"], "admin-candidate-survey": ["admin"], "admin-point-update": ["admin"], "admin-ai": ["admin"], "admin-data": ["admin"], "admin-profile": ["admin"], "admin-profile-edit": ["admin"], "company-profile": ["company"], "company-profile-edit": ["company", "admin", "editor"], "company-candidate-list": ["company"], "company-candidate-profile": ["company"], "candidate-profile": ["candidate"], "candidate-profile-edit": ["candidate", "admin", "editor"], "candidate-profile-image": ["candidate"], "candidate-company-profile": ["candidate"], "candidate-letter-add": ["candidate"], "candidate-experience-add": ["candidate"], "candidate-experience-edit": ["candidate"], "candidate-certificate-add": ["candidate"], "candidate-certificate-edit": ["candidate"] };function initHamburgerMenu() { let $btn = document.querySelector("header button");let $nav = document.querySelector("nav");let $main = document.querySelector("main");if (!$btn || !$nav) return;function toggle() { let isOpen = $nav.classList.contains("active");if (isOpen) { $nav.classList.remove("active");$btn.classList.remove("active");if ($main) $main.classList.remove("dimmed");document.body.style.overflow = "";} else { $nav.classList.add("active");$btn.classList.add("active");if ($main) $main.classList.add("dimmed");document.body.style.overflow = "hidden";} } $btn.addEventListener(CLICK_EVENT, toggle);document.addEventListener(CLICK_EVENT, (e) => { if ($nav.classList.contains('active') && !$nav.contains(e.target) && !$btn.contains(e.target)) { toggle();} });document.addEventListener('keydown', (e) => { if (e.key === 'Escape' && $nav.classList.contains('active')) { toggle();} });} function buildGuestMenu() { let $nav = document.querySelector("nav ul");if (!$nav) return;let path = window.location.pathname;let page = path.split("/").pop() || "index.html";page = page.replace(".html", "");$nav.innerHTML = "";MENU.guest.forEach(item => { if (item.href !== page) { $nav.append(lia(item.text, item.href + ".html"));} });} function buildAuthenticatedMenu() { let $nav = document.querySelector("nav ul");if (!$nav) return;let path = window.location.pathname;let page = path.split("/").pop() || "index.html";page = page.replace(".html", "");$nav.innerHTML = "";if (USER.role === "editor" || USER.role === "admin") { $nav.append(lia("Ana Sayfa", "index.html"));} let role = USER.role.toLowerCase();let items = MENU[role] || [];items.forEach(item => { if (item.href !== page) { $nav.append(lia(item.text, item.href + ".html"));} });$nav.append(li(""));let userRole = USER.role === "editor" ? "admin" : USER.role;let userId = USER.role === "company" ? USER.companyId : USER.id;$nav.append(lia(USER.name, `${userRole}-profile.html?id=${userId}`));$nav.append(lia("Çıkış", "logout.html"));updateLogoLink();} function updateLogoLink() { let $logoLink = document.querySelector("header a");if (!$logoLink || !USER) return;let role = USER.role.toLowerCase();if (role === "candidate") { $logoLink.href = `candidate-profile.html?id=${USER.id}`;} else if (role === "company") { $logoLink.href = "company-candidate-list.html";} else if (role === "admin" || role === "editor") { $logoLink.href = "index.html";} } onReady(() => { buildGuestMenu();initHamburgerMenu();});let AUTH_READY_EVENT = "authReady";let CLICK_EVENT = "click";function onAuthReady(callback) { if (window.USER) { callback();} else { document.addEventListener(AUTH_READY_EVENT, callback, { once: true });} } function dispatchAuthReady() { document.dispatchEvent(new Event(AUTH_READY_EVENT));} function onReady(callback) { if (document.readyState !== "loading") { callback();} else { document.addEventListener("DOMContentLoaded", callback, { once: true });} } let API = "https://api.dijitalusta.net/";let ERROR_MESSAGE_DEFAULT = "İşlem başarısız oldu, lütfen tekrar deneyiniz.";let SUCCESS_UPDATE_MESSAGE = "Güncelleme başarılı.";let LOADING_MESSAGE = "İşlem yapılıyor...";let LOADING_MESSAGE_WAIT = "İşlem yapılıyor, lütfen bekleyiniz.";async function api(callName, data = {}) { let url = `${API}${callName}`;try { let response = await fetch(url, { method: "POST", headers: { "Content-Type": "application/json" }, credentials: "include", body: JSON.stringify(data), });if (response.status >= 500) { console.error("API call failed:", callName, response.text());return { error: true, status: response.status, message: "Server error" };} if (!response.ok) { let text = await response.text();console.error(`HTTP ${response.status} from ${url}: ${text}`);return { error: true, status: response.status, message: text };} let result = await response.json();console.debug("API response:", callName, result);return result;} catch (error) { console.error("API call failed:", callName, error);return { error: true, message: error.message };} } async function apiBtn(btn, endpoint, data, successMsg, errorMsg, redirectUrl, $msgElement) { btn.disabled = true;let $msg = $msgElement;if (!$msg) { $msg = btn.nextElementSibling;if (!$msg || $msg.tagName !== "P") { $msg = document.createElement("p");btn.after($msg);} } $msg.textContent = LOADING_MESSAGE_WAIT;let result = await api(endpoint, data);if (!result || result.error || !result.isSuccess) { let errText = errorMsg || ERROR_MESSAGE_DEFAULT;if (result && Array.isArray(result.errors) && result.errors.length) { errText = result.errors.map(e => `• ${e}`).join("\n");} $msg.textContent = errText;} else { $msg.textContent = successMsg;if (result.data && result.data.redirectUrl) { redirectUrl = result.data.redirectUrl;} if (redirectUrl) { setTimeout(() => { location.href = redirectUrl;}, DELAY_1);} } btn.disabled = false;return result;} async function downloadCsv(endpoint, data = {}, defaultFilename = "export.csv", $msgElement = null) { if ($msgElement && $msgElement.tagName === "P") { $msgElement.textContent = "CSV hazırlanıyor...";} try { let response = await fetch(`${API}${endpoint}`, { method: "POST", headers: { "Content-Type": "application/json" }, credentials: "include", body: JSON.stringify(data) });if (!response.ok) { if ($msgElement) { $msgElement.textContent = "CSV oluşturulamadı.";} return false;} let contentType = response.headers.get("Content-Type");if (contentType && contentType.includes("application/json")) { let result = await response.json();if ($msgElement) { if (result.isSuccess) { $msgElement.textContent = result.data || "İşlem başarılı.";} else { $msgElement.textContent = result.data || "CSV oluşturulamadı.";} } return result.isSuccess;} let blob = await response.blob();let url = URL.createObjectURL(blob);let link = document.createElement("a");link.href = url;let filename = defaultFilename;let contentDisposition = response.headers.get("Content-Disposition");if (contentDisposition) { let match = contentDisposition.match(/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/);if (match && match[1]) { filename = match[1].replace(/['"]/g, '');} } link.download = filename;document.body.append(link);link.click();document.body.removeChild(link);URL.revokeObjectURL(url);if ($msgElement) { $msgElement.textContent = "CSV indirildi.";setTimeout(() => { $msgElement.textContent = "";}, DELAY_2);} return true;} catch (error) { console.error("CSV download error:", error);if ($msgElement) { $msgElement.textContent = "Bir hata oluştu.";} return false;} } let CITIES = ["Balıkesir", "Denizli", "Gaziantep", "Nevşehir", "Ordu"];let INTERVIEW_RESULTS = ["Mülakat yapıldı, sonucu olumlu", "Mülakat yapıldı sonucu başarısız, aday beğenilmedi", "Mülakat yapıldı sonucu başarısız, aday mülakata katılmadı", "Mülakat yapıldı sonucu başarısız, aday teklifi reddetti", "Mülakat iptal edildi"];function setFilters() { let $fis = document.querySelectorAll('.tblfilter');$fis.forEach($i => { $i.addEventListener('input', function () { let tbl = $i.nextElementSibling;let txt = this.value.toLowerCase();let rows = tbl.getElementsByTagName('tbody')[0].getElementsByTagName('tr');for (let i = 0;i < rows.length;i++) { let $r = rows[i];let cells = $r.getElementsByTagName('td');let rowText = '';for (let j = 0;j < cells.length;j++) { rowText += cells[j].textContent.toLowerCase() + ' ';} if (rowText.includes(txt)) { $r.style.display = '';} else { $r.style.display = 'none';} } });});} async function loadTables(querySelector = "table.load tbody") { let tBodies = document.querySelectorAll(querySelector);let key = window.location.pathname.includes("candidate") ? "memberId" : "companyId";let id = getId(key);if (!id) { id= USER.id;} let req = {};req[key] = id;for (let tbody of tBodies) { tbody.innerHTML = getMsgLine("Yükleniyor...");let result = await api(`${tbody.id}/GetAll`, req);if (!result || result.error || !result.isSuccess) { tbody.innerHTML = getMsgLine("Veri yüklenemedi");tbody.dispatchEvent(new CustomEvent("tableLoaded", { detail: { data: null, error: true } }));continue;} let data = result.data;if (!Array.isArray(data) && typeof data === 'object' && data !== null) { data = [data];} if (!Array.isArray(data) || data.length === 0) { tbody.innerHTML = getMsgLine("Veri yok");tbody.dispatchEvent(new CustomEvent("tableLoaded", { detail: { data: [], error: false } }));continue;} let table = tbody.closest("table");let headers = Array.from(table.querySelectorAll("thead th"));let fragment = document.createDocumentFragment();for (let item of data) { let $tr = tr();for (let th of headers) { let key = th.id;let value = item[key] ?? "";let label = th.textContent || key;if ((key === "start" || key === "end" || key.toLowerCase().includes("date")) && value && value !== "-") { value = formatDateLong(value);} else if (key === "createdAt" && value && value !== "-") { value = formatTimeLong(value);} let template = th.dataset?.url;let $td;if (template) { let href = template === key ? value : template.replace(/\{([^}]+)\}/g, (_, token) => item[token] ?? "");$td = tda(value || href || "", href || "#");} else { $td = td(value);} $td.setAttribute("data-label", label);$tr.append($td);} fragment.append($tr);} tbody.innerHTML = "";tbody.append(fragment);tbody.dispatchEvent(new CustomEvent("tableLoaded", { detail: { data: data, error: false } }));} } async function fillSpans(url, key = "memberId") { let id = getId(key);if (!id) { return null;} let req = {};req[key] = id;let $a = document.querySelectorAll(".qs");if ($a) { $a.forEach(a => a.href = a.href + `?id=${id}`);} let result = await api(url, req);if (!result || result.error) { console.error("Data fetch error:", result);return null;} if (result.data) { for (let prop in result.data) { let $s = document.getElementById(prop);if ($s) { let v = result.data[prop] || "-";if ((prop === "start" || prop === "end" || prop.toLowerCase().includes("date")) && v && v !== "-") { v = formatDateLong(v);} let tag = ($s.tagName || "").toLowerCase();if (tag === "img") { $s.src = v;} else if (tag === "textarea") { $s.value = v;} else if (prop.endsWith("Url") && v && v !== "-") { $s.innerHTML = "";let $a = a(v, v);$a.target = "_blank";$s.append($a);} else { $s.textContent = v;} } } } if (!result.isSuccess) { console.error("API error:", result);} return id;} async function fillInputs(url, key = "memberId") { let id = getId(key);if (id) { let req = {};req[key] = id;let result = await api(url, req);if (!result || result.error) { console.error("Data fetch error:", result);return id;} if (result.isSuccess) { for (let prop in result.data) { let $i = document.getElementById(prop);if ($i) { let v = result.data[prop];let tag = ($i.tagName || "").toLowerCase();let type = ($i.type || "").toLowerCase();if (tag === "textarea") { $i.value = v ?? "";} else if (tag === "input" && type === "date" && v) { $i.value = formatDateInput(v);} else if (tag === "input" && (type === "checkbox" || type === "radio")) { if (type === "checkbox") { $i.checked = Boolean(v);} else { $i.checked = ($i.value == v);} } else if ("value" in $i) { $i.value = v ?? "";} else { $i.textContent = v ?? "";} } } let $btn = document.querySelector("main button");$btn.disabled = false;$btn.nextElementSibling.innerHTML = "";} else { console.error("API error:", result);return id;} } return id;} function setMessageText($element, text) { if ($element && $element.tagName === "P") { $element.textContent = text;} } function getTodayDateString() { return new Date().toISOString().split('T')[0];} function isDateInFuture(dateString) { let selectedDate = new Date(dateString);let today = new Date();today.setHours(23, 59, 59, 999);return selectedDate > today;} function setBtnState($btn, isEnabled, disabledMessage = "") { if (!$btn) return;$btn.disabled = !isEnabled;$btn.title = isEnabled ? "" : disabledMessage;if (isEnabled) { $btn.classList.remove("btn-gray");$btn.classList.add("btn-act");} else { $btn.classList.remove("btn-act");$btn.classList.add("btn-gray");} } function showSuccessAndClose($msgDiv, $modal, message) { showModalMessage($msgDiv, "success", message);setTimeout(() => closeModal($modal), DELAY_2);} function createBlockButton(entityId, isBlocked, entityName, blockEndpoint, unblockEndpoint, idKey = "memberId") { let $btn = btn("btn-act", isBlocked ? "Engeli Kaldır" : "Engelle");$btn.dataset.entityId = entityId;$btn.dataset.isBlocked = isBlocked;$btn.addEventListener(CLICK_EVENT, async function () { let btn = this;let isCurrentlyBlocked = btn.dataset.isBlocked === "true";let endpoint = isCurrentlyBlocked ? unblockEndpoint : blockEndpoint;let confirmMessage = isCurrentlyBlocked ? `${entityName}'in engelini kaldırmak istediğinize emin misiniz?` : `${entityName}'i engellemek istediğinize emin misiniz?`;let $mbody = div();let $confirmLabel = p(confirmMessage);let $msgDiv = div(CSS_CLASSES.modalMessage);let $modal;let handleBlock = async function () { setButtonLoading(buttons.submitBtn, true);setMessageText(btn.nextElementSibling, LOADING_MESSAGE_WAIT);let req = {};req["memberId"] = USER.id;req[idKey] = btn.dataset.entityId;let result = await api(endpoint, req);if (result && result.isSuccess) { isCurrentlyBlocked = !isCurrentlyBlocked;btn.dataset.isBlocked = isCurrentlyBlocked;btn.innerText = isCurrentlyBlocked ? "Engeli Kaldır" : "Engelle";setMessageText(btn.nextElementSibling, "");closeModal($modal);} else { setMessageText(btn.nextElementSibling, ERROR_MESSAGE_DEFAULT);showModalMessage($msgDiv, "error", ERROR_MESSAGE_DEFAULT);setButtonLoading(buttons.submitBtn, false);} };let buttons = createModalButtons("İptal", isCurrentlyBlocked ? "Engeli Kaldır" : "Engelle", () => closeModal($modal), handleBlock);$mbody.append($confirmLabel, buttons.buttonsDiv, $msgDiv);$modal = createModal("Onay", $mbody);});let $wrapper = div();$wrapper.append($btn, p());return $wrapper;} function createShortlistButton(memberId, companyId, displayName, isShortlisted, $msgElement, $interviewBtn, isInterviewResulted, isHired) { let isDisabled = isHired || isInterviewResulted;let btnClass = isDisabled ? "btn-gray" : "btn-act";let $btn = btn(btnClass, isShortlisted ? "Kısa Listeden Çıkar" : "Kısa Listeye Ekle");$btn.dataset.memberId = memberId;$btn.dataset.companyId = companyId;$btn.dataset.isShortlisted = isShortlisted;if (isHired) { $btn.disabled = true;$btn.title = "Aday işe alındığı için kısa liste değiştirilemez";} else if (isInterviewResulted) { $btn.disabled = true;$btn.title = "Mülakat sonucu bildirildiği için kısa liste değiştirilemez";} $btn.addEventListener(CLICK_EVENT, async function () { let btn = this;let isCurrentlyShortlisted = btn.dataset.isShortlisted === "true";let endpoint = isCurrentlyShortlisted ? "Remove" : "Add";let confirmMessage = isCurrentlyShortlisted ? `${displayName}'i kısa listeden çıkarmak istediğinize emin misiniz?` : `${displayName}'i kısa listenize eklemek istediğinizden emin misiniz?`;let successMessage = isCurrentlyShortlisted ? "Kısa listeden çıkarıldı." : "Kısa listeye eklendi";let errorMessage = isCurrentlyShortlisted ? "Kısa listeden çıkarılamadı." : ERROR_MESSAGE_DEFAULT;let $mbody = div();let $confirmLabel = p(confirmMessage);let $msgDiv = div(CSS_CLASSES.modalMessage);let $modal;let handleShortlist = async function () { setButtonLoading(buttons.submitBtn, true);let $externalMsg = $msgElement || btn.nextElementSibling;setMessageText($externalMsg, LOADING_MESSAGE_WAIT);let result = await api("CompanyShortlist/" + endpoint, { memberId: btn.dataset.memberId, companyId: btn.dataset.companyId } );if (result && result.isSuccess) { isCurrentlyShortlisted = !isCurrentlyShortlisted;btn.dataset.isShortlisted = isCurrentlyShortlisted;btn.innerText = isCurrentlyShortlisted ? "Kısa Listeden Çıkar" : "Kısa Listeye Ekle";setBtnState($interviewBtn, isCurrentlyShortlisted, "Kısa listeye eklenmeden mülakat sonucu bildirilemez");setMessageText($externalMsg, successMessage);closeModal($modal);setTimeout(() => { setMessageText($externalMsg, "");}, DELAY_2);if (!isCurrentlyShortlisted && btn.closest("tr")) { btn.closest("tr").remove();} } else { setMessageText($externalMsg, errorMessage);showModalMessage($msgDiv, "error", errorMessage);setButtonLoading(buttons.submitBtn, false);} };let buttons = createModalButtons("İptal", isCurrentlyShortlisted ? "Kısa Listeden Çıkar" : "Kısa Listeye Ekle", () => closeModal($modal), handleShortlist );$mbody.append($confirmLabel, buttons.buttonsDiv, $msgDiv);$modal = createModal("Onay", $mbody);});return $btn;} function createInterviewReportButton(candidateId, companyId, displayName, isShortlisted, $hireBtn, isInterviewResulted, isHired) { let isDisabled = isHired || !isShortlisted || isInterviewResulted;let btnClass = isDisabled ? "btn-gray" : "btn-act";let $btn = btn(btnClass, "Mülakat Sonucu Bildir");if (isHired) { $btn.disabled = true;$btn.title = "Aday işe alındığı için mülakat sonucu değiştirilemez";} else if (!isShortlisted) { $btn.disabled = true;$btn.title = "Kısa listeye eklenmeden mülakat sonucu bildirilemez";} else if (isInterviewResulted) { $btn.disabled = true;$btn.title = "Mülakat sonucu zaten bildirilmiş";} $btn.addEventListener(CLICK_EVENT, async function () { if (this.disabled) return;let $mbody = div();let $candidateLabel = lbl(`Aday: ${displayName}`);$candidateLabel.className = "modal-subdued";let $dateLabel = lbl("Mülakat Yapıldığı Tarih");let todayDate = getTodayDateString();let $dateInput = date(todayDate);$dateInput.required = true;$dateInput.max = todayDate;$dateLabel.append($dateInput);let $resultLabel = lbl("Mülakat Sonucu");$resultLabel.className = "sel";let $resultInput = inp();$resultInput.placeholder = "Sonuç seçiniz...";$resultInput.required = true;$resultInput.readOnly = true;let $resultList = div();$resultList.id = "resultList";$resultLabel.append($resultInput, $resultList);let selectedResult = "";$resultInput.addEventListener(CLICK_EVENT, function () { if ($resultList.children.length === 0) { INTERVIEW_RESULTS.forEach(r => { let $item = div();$item.textContent = r;$item.addEventListener(CLICK_EVENT, function (e) { e.stopPropagation();e.preventDefault();$resultInput.value = r;selectedResult = r;$resultList.classList.remove("show");});$resultList.appendChild($item);});} $resultList.classList.toggle("show");});let $msgDiv = div(CSS_CLASSES.modalMessage);let $modal;let handleReport = async function () { let dateValue = $dateInput.value;if (!dateValue) { showModalMessage($msgDiv, "error", "Mülakat tarihini giriniz.");return;} if (!selectedResult) { showModalMessage($msgDiv, "error", "Mülakat sonucunu seçiniz.");return;} if (isDateInFuture(dateValue)) { showModalMessage($msgDiv, "error", "Gelecek bir tarih seçemezsiniz.");return;} setButtonLoading(buttons.submitBtn, true);let result = await api("CandidateInterview/Report", { candidateId: candidateId, companyId: companyId, interviewedAt: dateValue, result: selectedResult });if (result && result.isSuccess) { setBtnState($btn, false, "Mülakat sonucu zaten bildirilmiş");if ($btn.$shortlistBtn) { setBtnState($btn.$shortlistBtn, false, "Mülakat sonucu bildirildiği için kısa liste değiştirilemez");} if (selectedResult === "Mülakat yapıldı, sonucu olumlu") { setBtnState($hireBtn, true);} else { setBtnState($hireBtn, false, "Mülakat sonucu başarılı olmadığı için işe alınamaz");} showSuccessAndClose($msgDiv, $modal, "Mülakat sonucu bildirildi.");} else { let $row = $btn.closest("tr");if ($row) { let $buttons = $row.querySelectorAll("button");$buttons.forEach(button => { button.disabled = true;});} showModalMessage($msgDiv, "error", result?.message || ERROR_MESSAGE_DEFAULT);setButtonLoading(buttons.submitBtn, false);} };let buttons = createModalButtons("İptal", "Sonucu Bildir", () => closeModal($modal), handleReport);$mbody.append($candidateLabel, $dateLabel, $resultLabel, buttons.buttonsDiv, $msgDiv);$modal = createModal("Mülakat Sonucu Bildir", $mbody);});return $btn;} function createHireInformButton(memberId, companyId, displayName, isInterviewResulted, isInterviewSuccess, isHired, isHireInformed) { let isDisabled = isHired || isHireInformed || !isInterviewResulted || !isInterviewSuccess;let btnClass = isDisabled ? "btn-gray" : "btn-act";let $btn = btn(btnClass, "İşe Al");if (isHired) { $btn.disabled = true;$btn.title = "Aday zaten işe alındı";} else if (isHireInformed) { $btn.disabled = true;$btn.title = "Adayın işe alındığı bildirildi";} else if (!isInterviewResulted) { $btn.disabled = true;$btn.title = "Mülakat sonucu bildirilmeden işe alınamaz";} else if (!isInterviewSuccess) { $btn.disabled = true;$btn.title = "Mülakat sonucu başarılı olmadığı için işe alınamaz";} $btn.addEventListener(CLICK_EVENT, async function () { let $mbody = div();let $candidateLabel = lbl(`Aday: ${displayName}`);$candidateLabel.className = "modal-subdued";let $p = p("İşlemin devamında adayın resmi belgelerini saha elemanına onaylatmalısınız.");$p.className = "lbl-warn";let $msgDiv = div(CSS_CLASSES.modalMessage);let $modal;let handleHire = async function () { setButtonLoading(buttons.submitBtn, true);let result = await api("Candidate/HireInform", { candidateId: memberId, companyId: companyId });if (result && result.isSuccess) { setBtnState($btn, false, "Adayın işe alındığı bildirildi");showSuccessAndClose($msgDiv, $modal, `${displayName} işe alındı!`);} else { showModalMessage($msgDiv, "error", result?.message || ERROR_MESSAGE_DEFAULT);setButtonLoading(buttons.submitBtn, false);} };let buttons = createModalButtons("İptal", "İşe Alım Bildir", () => closeModal($modal), handleHire);$mbody.append($candidateLabel, $p, buttons.buttonsDiv, $msgDiv);$modal = createModal("İşe Alım Bildir", $mbody);});return $btn;} function createHireApproveButton(memberId, companyId, displayName, isInterviewResulted, isInterviewSuccess, isHired) { let isDisabled = isHired || !isInterviewResulted || !isInterviewSuccess;let btnClass = isDisabled ? "btn-gray" : "btn-act";let $btn = btn(btnClass, "İşe Alımı Doğrula");if (isHired) { $btn.disabled = true;$btn.title = "Aday işe alındı";} else if (!isInterviewResulted) { $btn.disabled = true;$btn.title = "Mülakat sonucu bildirilmeden işe alınamaz";} else if (!isInterviewSuccess) { $btn.disabled = true;$btn.title = "Mülakat sonucu başarılı olmadığı için işe alınamaz";} $btn.addEventListener(CLICK_EVENT, async function () { let $mbody = div();let $candidateLabel = lbl(`Aday: ${displayName}`);$candidateLabel.className = "modal-subdued";let $urlLabel = lbl("İşe Alım Evrak Linki (Google Drive URL)");let $urlInput = url("https://drive.google.com/...");$urlInput.required = true;$urlLabel.append($urlInput);let $msgDiv = div(CSS_CLASSES.modalMessage);let $modal;let handleHire = async function () { let url = $urlInput.value.trim();if (!url || !checkUrl(url)) { showModalMessage($msgDiv, "error", "Geçerli bir evrak linkini giriniz.");return;} setButtonLoading(buttons.submitBtn, true);let result = await api("Candidate/Hire", { candidateId: memberId, companyId: companyId, hirePaperDriveUrl: url });if (result && result.isSuccess) { setBtnState($btn, false, "Adayın işe alındığı onaylandı");showSuccessAndClose($msgDiv, $modal, `${displayName} işe alındı!`);} else { showModalMessage($msgDiv, "error", result?.message || ERROR_MESSAGE_DEFAULT);setButtonLoading(buttons.submitBtn, false);} };let buttons = createModalButtons("İptal", "İşe Alımı Doğrula", () => closeModal($modal), handleHire);$mbody.append($candidateLabel, $urlLabel, buttons.buttonsDiv, $msgDiv);$modal = createModal("İşe Alımı Doğrula", $mbody);});return $btn;} let USER;async function initAuth() { let path = window.location.pathname;let page = path.split("/").pop() || "index.html";page = page.replace(".html", "");if (PUBLIC_PAGES.includes(page) && page !== "access-denied") { showContent();return;} USER = await api("Member/Check");if (page === "access-denied") { if (USER && !USER.error && USER.isAuthenticated) { buildAuthenticatedMenu();} showContent();return;} if (!USER || USER.error || !USER.isAuthenticated) { showHeaderMsg("Sisteme giriş yapmanız gerekiyor...");hideOverlay();setTimeout(() => window.location.replace("demand-password.html"), DELAY_2);return;} let allowedRoles = PAGE_ROLES[page];if (!allowedRoles || !allowedRoles.includes(USER.role.toLowerCase())) { showHeaderMsg("Erişim izniniz yok, yönlendiriliyorsunuz...");hideOverlay();setTimeout(() => window.location.replace("access-denied.html"), DELAY_2);return;} buildAuthenticatedMenu();showContent();dispatchAuthReady();} onReady(async () => { await initAuth();});
