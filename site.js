function getId(key = "memberId") { let qs = new URLSearchParams(window.location.search);let id = qs.get("id");if (!id) { id = USER.id;if (key !== "memberId") { id = USER.companyId;} } if (!id) { console.warn(`No ID in query string or user context for key: ${key}`);return null;} return id;} function getTomorrow() { let t = new Date();t.setDate(t.getDate() + 1);return t.toISOString().split('T')[0];} function getMsgLine(msg) { return `<tr><td colspan="99" style="text-align:center;color:gray;">${msg}</td></tr>`;} function div(className) { let $d = document.createElement("div");if (className) { $d.className = className;} return $d;} function btn(className, text) { let $b = document.createElement("button");$b.type = "button";if (className) { $b.className = className;} if (text) { $b.textContent = text;} return $b;} function h3(text) { let $h = document.createElement("h3");if (text) { $h.textContent = text;} return $h;} function lbl(text) { let $l = document.createElement("label");if (text) { $l.textContent = text;} return $l;} function date(value) { let $i = document.createElement("input");$i.type = "date";if (value) { $i.value = value;} return $i;} function url(placeholder) { let $i = document.createElement("input");$i.type = "url";if (placeholder) { $i.placeholder = placeholder;} return $i;} function ul() { return document.createElement("ul");} function li(text) { let $li = document.createElement("li");if (text) { $li.textContent = text;} return $li;} function tr() { return document.createElement("tr");} function a(text, href) { let $a = document.createElement("a");if (href) { $a.href = href;} if (text) { $a.textContent = text;} return $a;} function p(text) { let $p = document.createElement("p");if (text) { $p.textContent = text;} return $p;} function td(text) { let $td = document.createElement("td");if (text) { $td.textContent = text;} return $td;} function tda(text, href) { let $td = td();let $a = a(text, href);$a.target = "_blank";$td.append($a);return $td;} function tdbtn(btn) { let $td = td();$td.append(btn, p());return $td;} function val(id) { let $i = document.getElementById(id);if ($i) { return ($i.value || "").trim();} return undefined;} function formatDateLong(dateStr) { if (!dateStr) return "-";let dt = new Date(dateStr);if (isNaN(dt.getTime())) return dateStr;return dt.toLocaleDateString("tr-TR", { day: '2-digit', month: 'long', year: 'numeric' });} function formatDateInput(dateStr) { if (!dateStr) return "";let dt = new Date(dateStr);if (isNaN(dt.getTime())) return "";return dt.toISOString().split('T')[0];} function checkEmail(email) { return email.includes("@") && email.includes(".") && email.indexOf("@") < email.lastIndexOf(".") && email.indexOf(" ") < 0 && email.length >= 5;} function checkUrl(url) { if (!url || typeof url !== "string") return false;try { new URL(url);return true;} catch { return false;} } function showOverMsg(msg) { let $o = document.createElement("div");$o.id = "over";$o.textContent = msg;document.body.append($o);return $o;} function showContent() { let $m = document.querySelector("main");if ($m) { let $o = document.getElementById("over");if ($o) { $o.remove();} $m.style.visibility = "visible";} } function toggleText(element) { let truncated = element.parentElement.firstChild;let full = truncated.nextElementSibling;if (truncated.style.display == "none") { truncated.style.display = "inline-block";full.style.display = "none";} else { truncated.style.display = "none";full.style.display = "inline-block";} } let MODAL_AUTO_CLOSE_DELAY = 2345;let CSS_CLASSES = { modal: "modal", modalOverlay: "modal-overlay", modalHeader: "modal-header", modalBody: "modal-body", modalButtons: "modal-buttons", modalBtnCancel: "modal-btn-cancel", modalBtnPrimary: "modal-btn-primary", modalMessage: "modal-message", modalClose: "modal-close" };function createModal(title, bodyContent) { let $overlay = div(CSS_CLASSES.modalOverlay);let $modal = div(CSS_CLASSES.modal);let $header = div(CSS_CLASSES.modalHeader);let $title = h3(title);let $closeBtn = btn(CSS_CLASSES.modalClose, "✖");$closeBtn.addEventListener(CLICK_EVENT, () => closeModal($overlay));$header.append($title, $closeBtn);let $mbody = div(CSS_CLASSES.modalBody);if (typeof bodyContent === "string") { $mbody.innerHTML = bodyContent;} else { $mbody.append(bodyContent);} $modal.append($header, $mbody);$overlay.append($modal);$overlay.addEventListener(CLICK_EVENT, (e) => { if (e.target === $overlay) { closeModal($overlay);} });document.body.append($overlay);return $overlay;} function closeModal($overlay) { if ($overlay && $overlay.parentNode) { $overlay.remove();} } function showModalMessage($msgDiv, type, message) { $msgDiv.style.display = "block";$msgDiv.className = `${CSS_CLASSES.modalMessage} ${type}`;$msgDiv.innerText = message;} function setButtonLoading($btn, isLoading, originalText) { $btn.disabled = isLoading;$btn.innerText = isLoading ? LOADING_MESSAGE : originalText;} function createModalButtons(cancelText, submitText, onCancel, onSubmit) { let $d = div(CSS_CLASSES.modalButtons);let $cancelBtn = btn(CSS_CLASSES.modalBtnCancel, cancelText);$cancelBtn.addEventListener(CLICK_EVENT, onCancel);let $submitBtn = btn(CSS_CLASSES.modalBtnPrimary, submitText);$submitBtn.addEventListener(CLICK_EVENT, onSubmit);$d.append($cancelBtn, $submitBtn);return { buttonsDiv: $d, cancelBtn: $cancelBtn, submitBtn: $submitBtn };} let MENU = { "admin": [ { text: "Firmalar", href: "admin-company-list" }, { text: "Adaylar", href: "admin-candidate-list" }, { text: "Adminler ve Editörler", href: "admin-and-editor-list" }, { text: "TOBB Eğitimden Geçen Adayları Davet Et", href: "admin-tobb-add" }, { text: "Yapay Zeka İşlemleri", href: "admin-ai" }, { text: "Data İşlemleri", href: "admin-data" } ], "company": [ { text: "Profil", href: "company-profile" }, { text: "Adaylar", href: "company-candidate-list" } ], "candidate": [ { text: "Profil", href: "candidate-profile" } ], "editor": [ { text: "Firmalar", href: "admin-company-list" }, { text: "Adaylar", href: "admin-candidate-list" } ] };let PUBLIC_PAGES = [ "login", "demand-password", "access-denied" ];let PAGE_ROLES = { "index": ["admin", "editor", "candidate", "company"], "logout": ["admin", "editor", "candidate", "company"], "admin-company-list": ["admin", "editor"], "admin-company-profile": ["admin", "editor"], "admin-company-block": ["admin", "editor"], "admin-company-unblock": ["admin", "editor"], "admin-candidate-list": ["admin", "editor"], "admin-candidate-profile": ["admin", "editor"], "admin-and-editor-list": ["admin"], "admin-company-add": ["admin"], "admin-editor-invite": ["admin"], "admin-tobb-add": ["admin"], "admin-ai": ["admin"], "admin-data": ["admin"], "admin-profile": ["admin"], "admin-profile-edit": ["admin"], "company-profile": ["company"], "company-profile-edit": ["company"], "company-candidate-list": ["company"], "company-candidate-profile": ["company"], "candidate-profile": ["candidate"], "candidate-profile-edit": ["candidate"], "candidate-profile-image": ["candidate"], "candidate-company-profile": ["candidate"], "candidate-experience-add": ["candidate"], "candidate-experience-edit": ["candidate"], "candidate-certificate-add": ["candidate"], "candidate-certificate-edit": ["candidate"] };function buildUserMenu() { let $m = document.querySelector("menu");if (!$m) { return;} let role = USER.role === "editor" ? "admin" : USER.role;let id = USER.role === "company" ? USER.companyId : USER.id;$m.innerHTML = "";let $profileLink = a(USER.name, `${role}-profile.html?id=${id}`);let $logoutLink = a("Çıkış", "logout.html");$m.append($profileLink, $logoutLink);} function buildRoleMenu() { let $m = document.querySelector("main");if (!$m) { return;} if (!$m.firstElementChild) { return;} let items = MENU[USER.role];if (items.length === 1) { window.location.href = items[0].href + ".html";return;} items.forEach(i => { let $a = a(i.text, i.href + ".html");$m.firstElementChild.append($a);});} let AUTH_READY_EVENT = "authReady";let CLICK_EVENT = "click";function onAuthReady(callback) { if (window.USER) { callback();} else { document.addEventListener(AUTH_READY_EVENT, callback, { once: true });} } function dispatchAuthReady() { document.dispatchEvent(new Event(AUTH_READY_EVENT));} function onReady(callback) { if (document.readyState !== "loading") { callback();} else { document.addEventListener("DOMContentLoaded", callback, { once: true });} } let API = "https://api.dijitalusta.net/";let ERROR_MESSAGE_DEFAULT = "İşlem başarısız oldu, lütfen tekrar deneyiniz.";let LOADING_MESSAGE = "İşlem yapılıyor...";let LOADING_MESSAGE_WAIT = "İşlem yapılıyor, lütfen bekleyiniz.";async function api(callName, data = {}) { let url = `${API}${callName}`;try { let response = await fetch(url, { method: "POST", headers: { "Content-Type": "application/json" }, credentials: "include", body: JSON.stringify(data), });if (response.status >= 500) { console.error("API call failed:", callName, response.text());return { error: true, status: response.status, message: "Server error" };} if (!response.ok) { let text = await response.text();console.error(`HTTP ${response.status} from ${url}: ${text}`);return { error: true, status: response.status, message: text };} let result = await response.json();console.debug("API response:", callName, result);return result;} catch (error) { console.error("API call failed:", callName, error);return { error: true, message: error.message };} } async function apiBtn(btn, endpoint, data, successMsg, errorMsg, redirectUrl) { btn.disabled = true;let $msg = btn.nextElementSibling;if (!$msg) { $msg = document.createElement("p");btn.after($msg);} $msg.textContent = LOADING_MESSAGE_WAIT;let result = await api(endpoint, data);if (!result || result.error || !result.isSuccess) { let errText = errorMsg || ERROR_MESSAGE_DEFAULT;if (result && Array.isArray(result.errors) && result.errors.length) { errText = result.errors.map(e => `• ${e}`).join("<br>");} $msg.innerHTML = errText;btn.disabled = false;} else { $msg.textContent = successMsg;if (redirectUrl) { setTimeout(() => { location.href = redirectUrl;}, 1234);} } return result;} function setFilters() { let $fis = document.querySelectorAll('.tblfilter');$fis.forEach($i => { $i.addEventListener('input', function () { let tbl = $i.nextElementSibling;let txt = this.value.toLowerCase();let rows = tbl.getElementsByTagName('tbody')[0].getElementsByTagName('tr');for (let i = 0;i < rows.length;i++) { let $r = rows[i];let cells = $r.getElementsByTagName('td');let rowText = '';for (let j = 0;j < cells.length;j++) { rowText += cells[j].textContent.toLowerCase() + ' ';} if (rowText.includes(txt)) { $r.style.display = '';} else { $r.style.display = 'none';} } });});} async function loadTables() { let tBodies = document.querySelectorAll("table.load tbody");let key = window.location.pathname.includes("candidate") ? "memberId" : "companyId";let id = getId(key);if (!id) { return;} let req = {};req[key] = id;for (let tbody of tBodies) { tbody.innerHTML = getMsgLine("Yükleniyor...");let result = await api(`${tbody.id}/GetAll`, req);if (!result || result.error || !result.isSuccess) { tbody.innerHTML = getMsgLine("Veri yüklenemedi");tbody.dispatchEvent(new CustomEvent('tableLoaded', { detail: { data: null, error: true } }));continue;} let data = result.data;if (!Array.isArray(data) || data.length === 0) { tbody.innerHTML = getMsgLine("Veri bulunamadı");tbody.dispatchEvent(new CustomEvent('tableLoaded', { detail: { data: [], error: false } }));continue;} let table = tbody.closest("table");let headers = Array.from(table.querySelectorAll("thead th"));let fragment = document.createDocumentFragment();for (let item of data) { let $tr = tr();for (let th of headers) { let key = th.id;let value = item[key] ?? "";if ((key === "birthDate" || key.toLowerCase().includes("date")) && value && value !== "-") { value = formatDateLong(value);} let template = th.dataset?.url;if (template) { let href = template === key ? value : template.replace(/\{([^}]+)\}/g, (_, token) => item[token] ?? "");$tr.append(tda(value || href || "", href || "#"));} else { $tr.append(td(value));} } fragment.append($tr);} tbody.innerHTML = "";tbody.append(fragment);tbody.dispatchEvent(new CustomEvent('tableLoaded', { detail: { data: data, error: false } }));} } async function fillSpans(url, key = "memberId") { let id = getId(key);if (!id) { return null;} let req = {};req[key] = id;let $a = document.querySelectorAll(".qs");if ($a) { $a.forEach(a => a.href = a.href + `?id=${id}`);} let result = await api(url, req);if (!result || result.error) { console.error("Data fetch error:", result);return null;} if (result.isSuccess) { for (let prop in result.data) { let $s = document.getElementById(prop);if ($s) { let v = result.data[prop] ?? "-";if ((prop === "birthDate" || prop.toLowerCase().includes("date")) && v && v !== "-") { v = formatDateLong(v);} let tag = ($s.tagName || "").toLowerCase();if (tag === "img") { $s.src = v;} else if (tag === "textarea") { $s.value = v;} else { $s.textContent = v;} } } } else { console.error("API error:", result);return null;} return id;} async function fillInputs(url, key = "memberId") { let id = getId(key);if (id) { let req = {};req[key] = id;let result = await api(url, req);if (!result || result.error) { console.error("Data fetch error:", result);return id;} if (result.isSuccess) { for (let prop in result.data) { let $i = document.getElementById(prop);if ($i) { let v = result.data[prop];let tag = ($i.tagName || "").toLowerCase();let type = ($i.type || "").toLowerCase();if (tag === "textarea") { $i.value = v ?? "";} else if (tag === "input" && type === "date" && v) { $i.value = formatDateInput(v);} else if (tag === "input" && (type === "checkbox" || type === "radio")) { if (type === "checkbox") { $i.checked = Boolean(v);} else { $i.checked = ($i.value == v);} } else if ("value" in $i) { $i.value = v ?? "";} else { $i.textContent = v ?? "";} } } let $btn = document.querySelector("button");$btn.disabled = false;$btn.nextElementSibling.innerHTML = "";} else { console.error("API error:", result);return id;} } return id;} function createBlockButton(entityId, isBlocked, displayName, blockEndpoint, unblockEndpoint, idKey = "memberId") { let $btn = btn(null, isBlocked ? "Engeli Kaldır" : "Engelle");$btn.dataset.entityId = entityId;$btn.dataset.isBlocked = isBlocked ? "true" : "false";$btn.addEventListener(CLICK_EVENT, async function () { let btn = this;let isCurrentlyBlocked = btn.dataset.isBlocked === "true";let endpoint = isCurrentlyBlocked ? unblockEndpoint : blockEndpoint;let confirmMessage = isCurrentlyBlocked ? `${displayName}'in engelini kaldırmak istediğinize emin misiniz?` : `${displayName}'i engellemek istediğinize emin misiniz?`;if (!confirm(confirmMessage)) { return;} btn.disabled = true;btn.nextElementSibling.innerText = LOADING_MESSAGE_WAIT;let req = {};req[idKey] = btn.dataset.entityId;let result = await api(endpoint, req);if (result && result.isSuccess) { isCurrentlyBlocked = !isCurrentlyBlocked;btn.dataset.isBlocked = isCurrentlyBlocked ? "true" : "false";btn.innerText = isCurrentlyBlocked ? "Engeli Kaldır" : "Engelle";btn.nextElementSibling.innerText = "";} else { btn.nextElementSibling.innerText = ERROR_MESSAGE_DEFAULT;} btn.disabled = false;});return $btn;} function createFavoriteButton(memberId, companyId, displayName) { let $btn = btn(null, "Favoriden Çıkar");$btn.addEventListener(CLICK_EVENT, async function () { if (!confirm(`${displayName}'i favorilerden çıkarmak istediğinize emin misiniz?`)) { return;} let btn = this;btn.disabled = true;btn.nextElementSibling.innerText = LOADING_MESSAGE_WAIT;let result = await api("CompanyFavorite/Remove", { memberId: memberId, companyId: companyId });if (result && result.isSuccess) { btn.closest("tr").remove();} else { btn.nextElementSibling.innerText = ERROR_MESSAGE_DEFAULT;btn.disabled = false;} });return $btn;} function createInterviewScheduleButton(memberId, companyId, displayName) { let $btn = btn("action-btn-secondary", "Mülakata Davet Et");$btn.addEventListener(CLICK_EVENT, async function () { let $mbody = div();let $candidateLabel = lbl(`Aday: ${displayName}`);$candidateLabel.className = "modal-subdued";let $dateLabel = lbl("Mülakat Tarihi");let $dateInput = date(getTomorrow());$dateInput.required = true;$dateInput.min = new Date().toISOString().split('T')[0];$dateLabel.append($dateInput);let $msgDiv = div(CSS_CLASSES.modalMessage);let $modal;let handleSchedule = async function () { let date = $dateInput.value;if (!date) { showModalMessage($msgDiv, "error", "Lütfen tarih seçiniz.");return;} let selectedDate = new Date(date);let today = new Date();today.setHours(0, 0, 0, 0);if (selectedDate < today) { showModalMessage($msgDiv, "error", "Geçmiş bir tarih seçemezsiniz.");return;} setButtonLoading(buttons.submitBtn, true);let result = await api("CandidateInterview/Schedule", { candidateId: memberId, companyId: companyId, scheduledAt: date });if (result && result.isSuccess) { showModalMessage($msgDiv, "success", `${displayName} mülakata davet edildi. Tarih: ${date}`);setTimeout(() => { closeModal($modal);}, MODAL_AUTO_CLOSE_DELAY);} else { showModalMessage($msgDiv, "error", result?.message || ERROR_MESSAGE_DEFAULT);setButtonLoading(buttons.submitBtn, false, "Mülakata Davet Et");} };let buttons = createModalButtons("İptal", "Mülakata Davet Et", () => closeModal($modal), handleSchedule );$mbody.append($candidateLabel, $dateLabel, buttons.buttonsDiv, $msgDiv);$modal = createModal("Mülakat Planla", $mbody);});return $btn;} function createHireCandidateButton(memberId, companyId, displayName) { let $btn = btn("action-btn-secondary", "İşe Al");$btn.addEventListener(CLICK_EVENT, async function () { let $mbody = div();let $candidateLabel = lbl(`Aday: ${displayName}`);$candidateLabel.className = "modal-subdued";let $urlLabel = lbl("İşe Alım Evrak Linki (Google Drive URL)");let $urlInput = url("https://drive.google.com/...");$urlInput.required = true;$urlLabel.append($urlInput);let $msgDiv = div(CSS_CLASSES.modalMessage);let $modal;let handleHire = async function () { let url = $urlInput.value.trim();if (!url || !checkUrl(url)) { showModalMessage($msgDiv, "error", "Lütfen geçerli bir evrak linkini giriniz.");return;} setButtonLoading(buttons.submitBtn, true);let result = await api("Candidate/Hire", { candidateId: memberId, companyId: companyId, hirePaperDriveUrl: url });if (result && result.isSuccess) { showModalMessage($msgDiv, "success", `${displayName} başarıyla işe alındı!`);setTimeout(() => { closeModal($modal);}, MODAL_AUTO_CLOSE_DELAY);} else { showModalMessage($msgDiv, "error", result?.message || ERROR_MESSAGE_DEFAULT);setButtonLoading(buttons.submitBtn, false, "İşe Al");} };let buttons = createModalButtons("İptal", "İşe Al", () => closeModal($modal), handleHire);$mbody.append($candidateLabel, $urlLabel, buttons.buttonsDiv, $msgDiv);$modal = createModal("Aday İşe Al", $mbody);});return $btn;} let USER;async function initAuth() { let path = window.location.pathname;let page = path.split("/").pop() || "index.html";page = page.replace(".html", "");if (PUBLIC_PAGES.includes(page)) { showContent();return;} USER = await api("Member/Check");if (!USER || USER.error || !USER.isAuthenticated) { showOverMsg("Sisteme giriş yapmanız gerekiyor...");setTimeout(() => window.location.replace("demand-password.html"), 789);return;} buildUserMenu();let allowedRoles = PAGE_ROLES[page];if (!allowedRoles || !allowedRoles.includes(USER.role.toLowerCase())) { showOverMsg("Erişim izniniz yok, yönlendiriliyorsunuz...");setTimeout(() => window.location.replace("access-denied.html"), 789);return;} if (page === "index") { buildRoleMenu();} showContent();dispatchAuthReady();} onReady(async () => { await initAuth();});onAuthReady(() => { setTimeout(loadTables, 1234);setTimeout(setFilters, 2345);});
